services:
  nginx:
    build: ./nginx
    ports:
      # we will deliver over port 1337.
      # if you change this port, you should also remember to change
      # `CSRF_TRUSTED_ORIGINS` in `settings.py`.
      - 1337:80
    volumes:
      - static_volume:/home/app/static/staticfiles
      - media_volume:/home/app/static/mediafiles
    depends_on:
      - web

  web:
    env_file:
      - .django.env.prod
      - .celery.env.prod
      - .postgres.env.prod
      - .influxdb.env
      - .ssh.env
      - .contacts.env
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
    build: 
      context: django/hlink
      dockerfile: Dockerfile.prod
    expose:
      - 8000
    command:  >
      sh -c "python manage.py makemigrations &&
             python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             (celery -A hlink worker --loglevel=info &
              celery -A hlink beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler &
             gunicorn hlink.wsgi:application --bind 0.0.0.0:8000)"
    volumes:
      - static_volume:/home/app/static/staticfiles
      - media_volume:/home/app/static/mediafiles
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      influxdb2:
        condition: service_healthy

  redis:
    image: redis:7-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 2s
      timeout: 3s
      retries: 5

  postgres:
    env_file:
      - .postgres.env.prod
    image: postgres:13-alpine
    restart: always
    expose:
      - 5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  influxdb2:
    env_file:
      - .influxdb.env
    image: influxdb:2.7
    expose:
      - 8086
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8086/health"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 5s
    volumes:
      - ./influxdb/scripts:/docker-entrypoint-initdb.d
      - influxdb2-data:/var/lib/influxdb2
  
  grafana:
    depends_on:
      - influxdb2
    env_file:
      - .grafana.env
      - .influxdb.env
    image: grafana/grafana:11.5.1
    expose:
      - 3000
    environment:
      GF_LOG_LEVEL: WARNING
      GF_SERVER_ROOT_URL: http://localhost:1337/grafana
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards:/etc/grafana/dashboards

volumes:
  static_volume:
  media_volume:
  influxdb2-data:
  postgres-data:

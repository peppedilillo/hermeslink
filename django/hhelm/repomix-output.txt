This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-10T13:30:00.633Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
accounts/
  migrations/
    0001_initial.py
  admin.py
  apps.py
  models.py
  tests.py
  urls.py
  views.py
configs/
  templates/
    configs/
      upload.html
  admin.py
  apps.py
  models.py
  tests.py
  urls.py
  views.py
hhelm/
  asgi.py
  settings.py
  urls.py
  wsgi.py
main/
  templates/
    main/
      index.html
  admin.py
  apps.py
  models.py
  tests.py
  urls.py
  views.py
scripts/
  init.sh
templates/
  registration/
    login.html
    logout.html
    password_reset_complete.html
    password_reset_confirm.html
    password_reset_done.html
    password_reset_email.html
    password_reset_form.html
  base.html
  navbar.html
Dockerfile
Dockerfile.prod
manage.py
requirements.txt

================================================================
Repository Files
================================================================

================
File: accounts/migrations/0001_initial.py
================
# Generated by Django 5.1.6 on 2025-02-10 13:28

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]

================
File: accounts/admin.py
================
from django.contrib import admin
from .models import CustomUser
from django.contrib.auth.admin import UserAdmin


# Register your models here.
admin.site.register(CustomUser, UserAdmin)

================
File: accounts/apps.py
================
from django.apps import AppConfig


class UsersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'accounts'

================
File: accounts/models.py
================
from django.contrib.auth.models import AbstractUser


class CustomUser(AbstractUser):
    pass

================
File: accounts/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: accounts/urls.py
================
from django.urls import path

from . import views

app_name = "accounts"
urlpatterns = [
    path("logout/", views.logout, name="logout"),
]

================
File: accounts/views.py
================
from django.contrib.auth import logout as auth_logout
from django.shortcuts import render


def logout(request):
    auth_logout(request)
    return render(request, "registration/logout.html")

================
File: configs/templates/configs/upload.html
================
{% extends 'base.html' %}
{% block content %}
  {% include "navbar.html" %}

  <p>Upload a file here:</p>
  <form action="{% url "upload" %}" method="post" enctype="multipart/form-data">
    {% csrf_token %}
    <input type="file" name="image_file">
    <input type="submit" value="submit" />
  </form>

  {% if image_url %}
    <p>File uploaded at: <a href="{{ image_url }}">{{ image_url }}</a></p>
  {% endif %}

  <p>
    Go back to <a href="{% url 'index' %}">homepage</a>.
  </p>
{% endblock %}

================
File: configs/admin.py
================
from django.contrib import admin

# Register your models here.

================
File: configs/apps.py
================
from django.apps import AppConfig


class ConfigsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'configs'

================
File: configs/models.py
================
from django.db import models

# Create your models here.

================
File: configs/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: configs/urls.py
================
from django.urls import path

from . import views

app_name = "configs"
urlpatterns = [
    path("upload/", views.image_upload, name="image_upload"),
]

================
File: configs/views.py
================
from django.shortcuts import render
from django.core.files.storage import FileSystemStorage
from django.contrib.auth.decorators import login_required

from hhelm.settings import MEDIA_ROOT, MEDIA_URL, DEBUG

@login_required
def image_upload(request):
    if request.method == "POST" and request.FILES["image_file"]:
        image_file = request.FILES["image_file"]
        fs = FileSystemStorage()
        filename = fs.save(image_file.name, image_file)
        image_url = fs.url(filename)
        return render(
            request,
            "configs/upload.html",
            {"image_url": image_url},
        )
    return render(request, "configs/upload.html")

================
File: hhelm/asgi.py
================
"""
ASGI config for hhelm project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hhelm.settings')

application = get_asgi_application()

================
File: hhelm/settings.py
================
"""
Django settings for hhelm project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(os.environ.get("DEBUG", default=0)))

ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", default="").split(" ")


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # p. custom apps
    "main",
    "accounts",
    "configs",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'hhelm.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        "DIRS": [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'hhelm.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        # p. the `DB_DIR` env var should be set at build time by docker files.
        'NAME': Path(os.environ.get("DB_DIR")) / Path('db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Rome'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# p: custom user model
AUTH_USER_MODEL = "accounts.CustomUser"

# p. The environment variable `STATIC_DIR` is defined in dockerfile.
STATIC_ROOT = Path(os.environ.get("STATIC_DIR"))

MEDIA_URL = "/media/"
# p. The environment variable `MEDIA_DIR` is defined in dockerfile.
MEDIA_ROOT = Path(os.environ.get("MEDIA_DIR"))

# p. sets entrusted csrf urls
CSRF_TRUSTED_ORIGINS = ["http://localhost:1337"]

# p. sets login url to index instead of profile page
LOGIN_REDIRECT_URL = '/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

================
File: hhelm/urls.py
================
"""
URL configuration for hhelm project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path
from django.urls import include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path("", include("main.urls")),
    path("configs/", include("configs.urls")),
    path("accounts/", include("accounts.urls")),
    path('accounts/', include('django.contrib.auth.urls')),
    path('admin/', admin.site.urls),
]

if bool(settings.DEBUG):
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

================
File: hhelm/wsgi.py
================
"""
WSGI config for hhelm project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hhelm.settings')

application = get_wsgi_application()

================
File: main/templates/main/index.html
================
{% extends 'base.html' %}
{% block content %}
  {% include "navbar.html" %}

  Welcome to hhelm! Go to <a href="/grafana/d/sensor-data">dashboard</a> or try <a href="{% url 'configs:image_upload' %}">upload</a> a file.

{% endblock %}

================
File: main/admin.py
================
from django.contrib import admin

# Register your models here.

================
File: main/apps.py
================
from django.apps import AppConfig


class MainConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'main'

================
File: main/models.py
================
from django.db import models

# Create your models here.

================
File: main/tests.py
================
from django.test import TestCase

# Create your tests here.

================
File: main/urls.py
================
from django.urls import path

from . import views

app_name = "main"
urlpatterns = [
    path("", views.index, name="index"),
]

================
File: main/views.py
================
from django.shortcuts import render

# Create your views here.
def index(request):
    return render(request, 'main/index.html')

================
File: scripts/init.sh
================
echo "[1/3] Running migrations.."
python manage.py makemigrations
python manage.py makemigrations accounts
python manage.py makemigrations configs
python manage.py makemigrations main
python manage.py migrate
echo "[2/3] Creating superuser.."
python manage.py createsuperuser
echo "Done"

================
File: templates/registration/login.html
================
{% extends "base.html" %}

{% block content %}

  {% if form.errors %}
    <p>Your username and password didn't match. Please try again.</p>
  {% endif %}

  {% if next %}
    {% if user.is_authenticated %}
      <p>Your account doesn't have access to this page. To proceed,
      please login with an account that has access.</p>
    {% else %}
      <p>Please login to see this page.</p>
    {% endif %}
  {% endif %}

  <form method="post" action="{% url 'login' %}">
    {% csrf_token %}
    <table>
      <tr>
        <td>{{ form.username.label_tag }}</td>
        <td>{{ form.username }}</td>
      </tr>
      <tr>
        <td>{{ form.password.label_tag }}</td>
        <td>{{ form.password }}</td>
      </tr>
    </table>
    <input type="submit" value="login">
    <input type="hidden" name="next" value="{{ next }}">
  </form>

  {# Assumes you set up the password_reset view in your URLconf #}
  <p><a href="{% url 'password_reset' %}">Lost password?</a></p>

{% endblock %}

================
File: templates/registration/logout.html
================
{% block content %}
    <p>Logged out!</p>
    <p>
        <a href="{% url 'login' %}">Click here to login again.</a>
    </p>
    <p>
        <a href="{% url 'main:index.html' %}">Go back to home.</a>
    </p>
{% endblock %}

================
File: templates/registration/password_reset_complete.html
================
{% extends "base.html" %}

{% block content %}
  <h1>The password has been changed!</h1>
  <p><a href="{% url 'login' %}">log in again?</a></p>
{% endblock %}

================
File: templates/registration/password_reset_confirm.html
================
{% extends "base.html" %}

{% block content %}
    {% if validlink %}
        <p>Please enter (and confirm) your new password.</p>
        <form action="" method="post">
        {% csrf_token %}
            <table>
                <tr>
                    <td>{{ form.new_password1.errors }}
                        <label for="id_new_password1">New password:</label></td>
                    <td>{{ form.new_password1 }}</td>
                </tr>
                <tr>
                    <td>{{ form.new_password2.errors }}
                        <label for="id_new_password2">Confirm password:</label></td>
                    <td>{{ form.new_password2 }}</td>
                </tr>
                <tr>
                    <td></td>
                    <td><input type="submit" value="Change my password"></td>
                </tr>
            </table>
        </form>
    {% else %}
        <h1>Password reset failed</h1>
        <p>The password reset link was invalid, possibly because it has already been used. Please request a new password reset.</p>
    {% endif %}
{% endblock %}

================
File: templates/registration/password_reset_done.html
================
{% extends "base.html" %}

{% block content %}
  <p>We've emailed you instructions for setting your password. If they haven't arrived in a few minutes, check your spam folder.</p>
{% endblock %}

================
File: templates/registration/password_reset_email.html
================
Someone asked for password reset for email {{ email }}. Follow the link below:
{{ protocol }}://{{ domain }}{% url 'password_reset_confirm' uidb64=uid token=token %}

================
File: templates/registration/password_reset_form.html
================
{% extends "base.html" %}

{% block content %}
  <form action="" method="post">
  {% csrf_token %}
  {% if form.email.errors %}
    {{ form.email.errors }}
  {% endif %}
      <p>{{ form.email }}</p>
    <input type="submit" class="btn btn-default btn-lg" value="Reset password">
  </form>
{% endblock %}

================
File: templates/base.html
================
<!doctype html>
<html lang="en">
  <head>
    {% block title %}
      <title>HHelm</title>
    {% endblock %}
  </head>
  <body>
    {% block content %}
    {% endblock %}
  </body>
</html>

================
File: templates/navbar.html
================
<div>
    <p>
        {% if user.is_authenticated %}
            Hello {{ user.get_username }}!
            (<a href="{% url 'accounts:logout' %}">logout</a>)
        {% else %}
            Hello unknown user, <a href="{% url 'login' %}">login</a> here.
        {% endif %}
    </p>
</div>

================
File: Dockerfile
================
FROM python:3.11-bookworm

# creates directory for project
ENV HOME=/home/app
ENV APP_HOME=/home/app/web
RUN mkdir -p $HOME
RUN mkdir $APP_HOME

# create directory for db
# note that this are mounted, but we are still creating the directory ourself.
# this is because we need to change the ownership of the directory to our app
# user: mounted vols are owned by root.
ENV DB_DIR=/home/app/db/
RUN mkdir $DB_DIR

# create a directory for static files
ENV STATIC_DIR=/home/app/static/staticfiles
RUN mkdir -p $STATIC_DIR
# and one as well for media files
ENV MEDIA_DIR=/home/app/static/mediafiles
RUN mkdir $MEDIA_DIR

WORKDIR $APP_HOME

# do not write pyc file on disk
ENV PYTHONDONTWRITEBYTECODE 1
# do not buffer stdout and stdin
ENV PYTHONUNBUFFERED 1

# install dependencies
RUN pip install --upgrade pip
COPY requirements.txt .
RUN pip install -r requirements.txt

COPY . .

================
File: Dockerfile.prod
================
## BUILD HELPER 
FROM python:3.11-bookworm AS builder

WORKDIR /usr/src/app

# sets python not to write pyc file on disk and not to buffer stdout and stdin
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# install dependencies
RUN pip install --upgrade pip
COPY requirements.txt .
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r requirements.txt

## FINAL IMAGE
FROM python:3.11-bookworm

# adds a default user
RUN addgroup --system app && adduser --system --group app

# creates directory for project
ENV HOME=/home/app
ENV APP_HOME=/home/app/web
RUN mkdir -p $HOME
RUN mkdir $APP_HOME

# create a directory for the db
ENV DB_DIR=/home/app/db/
RUN mkdir $DB_DIR

# create a directory for static files
ENV STATIC_DIR=/home/app/static/staticfiles
RUN mkdir -p $STATIC_DIR
# and one as well for media files
ENV MEDIA_DIR=/home/app/static/mediafiles
RUN mkdir $MEDIA_DIR

# we move to the codebase directory
WORKDIR $APP_HOME

# and install dependencies
RUN apt-get update && apt-get install -y --no-install-recommends netcat-openbsd
COPY --from=builder /usr/src/app/wheels /wheels
COPY --from=builder /usr/src/app/requirements.txt .
RUN pip install --upgrade pip
RUN pip install --no-cache /wheels/*

# finally we copy the project
COPY . $APP_HOME

# sets permissions over home directory to user
# this should follow copy, otherwise new copied files 
# will be owned by root
RUN chown -R app:app $HOME

# and pass in the new user
USER app

================
File: manage.py
================
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hhelm.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

================
File: requirements.txt
================
Django==5.1.6
gunicorn==23.0.0
